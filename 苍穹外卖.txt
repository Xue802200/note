## 开发环境搭建

后端：![image-20250123204132609](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250123204132609.png)

![image-20250123204810406](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250123204810406.png)

# day01

接受参数可以用用DTO类去接受

controller层方法的返回值都是VO形式的，并且用Reuslt类进行封装

在xml中的配置项统一封装成配置属性类，再用autowired进行依赖注入



前端发送的请求其实就是对于tomcat服务器中的某一个接口进行请求

![image-20250129121911621](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250129121911621.png)

为什么前端发送秦请求的网址和controller层中方法设置的地址不一样   原因？

## nginx——反向代理

nginx反向代理技术，就是将前端发送的动态请求由nginx转发到后端服务器  原因？

1.提高访问速度 ——前端请求不直接访问后端服务器，而且首先经过nginx再访问后端服务器

2.进行负载均衡——把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器

3，保证后端服务安全——外部用户只能访问nginx，并不知道后端服务器的IP地址，因此可以避免攻击

### 反向代理的配置

![image-20250129124718071](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250129124718071.png)

表示路径为location/api...的请求可以去访问http://localhost:8080/admin/...的后端路径

### 负载均衡的配置

![image-20250129124938741](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250129124938741.png)

![image-20250129125503559](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250129125503559.png)

跟反向代理的配置最主要的区别是在于webservers，在webservers后的两个端口号后可以添加负载策略

### 登录功能的完善——对密码进行加密处理

保证密码不被其他人所盗取而采用的加密技术

TODO：idea中的标签，用于提醒此处还有地方需要整改，可后续在idea中查看整个项目的TODO位置，便于后续代码的修改

DigestUtils类的方法可以将指定的属性值进行md5加密算法处理，参数要求为getBytes格式

### 接口文档的导入     Swagger

#### 介绍和使用方式

导入这里用apifox

Swagger——Kinfe4j  是为Java MVC框架集成Swagger生成Api文档的增强解决方案

1.导入Knife4j的maven坐标

```Java
<dependency>
    <groupld>com.github.xiaoymin</groupld>
    <artifactld>knife4j-spring-boot-starter</artifactld>
    <version>3.0.2</version>
</dependency>
```

2.在配置类中加入knife4j相关配置

```Java
@Bean
public Docket docket() {
    ApiInfo apiInfo = new ApiInfoBuilder()
            .title("苍穹外卖项目接口文档")
            .version("2.0")
            .description("苍穹外卖项目接口文档")
            .build();
    Docket docket = new Docket(DocumentationType.SWAGGER_2)
            .apiInfo(apiInfo)
            .select()
            .apis(RequestHandlerSelectors.basePackage("com.sky.controller"))
            .paths(PathSelectors.any())
            .build();
    return docket;
}
```

3。设置静态资源映射，否则接口文档页面无法访问

```java
/**
 * 设置静态资源映射
 * @param registry
 */
protected void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler("/doc.html").addResourceLocations("classpath:/META-INF/resources/");
    registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
}
```

#### 常用注解

![image-20250129150616874](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250129150616874.png)

```Java
@Api(tags = "员工相关接口")
@ApiModel(description = "员工登录时传递的数据模型")
@ApiModelProperty("用户名")
@ApiOperation(value = "员工登录")
```

# day02

## 新增员工

### 代码开发

根据新增员工接口设计对应的DTO：  ![image-20250130154307816](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250130154307816.png)

ps：当前端提交的数据和实体类中对应的属性差别比较大时，建议使用DTO来封装数据

### 代码完善

#### 1.添加重复数据的时候会报错

1.添加重复数据的时候会有SQLIntegrityConstraintViolationException的异常 ，会显示Duplicate entry 'zhangsan' for key 'employee.idx_username'的报错信息

2.在全局异常处理器GlobalExceptionHandler中添加一个方法，方法形参为SQLIntegrityConstraintViolationException

3.判断报错信息是否有Duplicate entry，有的话则说明是重复添加的报错，没有则说明是未知错误

4.根据getMessage获取报错信息，再根据split方法获取重复添加的用户名返回给前端

#### 2.操作人和修改人的ID固定

![image-20250130223404020](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250130223404020.png)

ThreadLocal并不是一个Thread，而是Thread的局部变量

ThreadLocal为每个线程单独提供一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。

ThreadLocal常用方法：

public void set(T value)   设置当前线程的线程局部变量的值

public T get()                    返回当前线程所对应的线程局部变量的值

public void remove()         移除当前线程的线程局部变量

## 分页查询

### 代码开发

1.在contoller层编写对应的代码，保证url路径和请求格式一致，返回的放回类型应该为Result<PageResult>，方法的行参为EmployeePageQueryDTO，表示进行分页查询时对应的DTO，在方法体内要调用service的相关方法，进行分页查询

![image-20250131161853332](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250131161853332.png)

2.service层，在service层的接口新增方法employService，并在实现类进行实现，方法的形参也为在EmployeePageQueryDTO。代码的第一行要调用PageHelper.startPage()方法进行初始设置，传递page和pageSize，底层会自动写sql语句。然后调用Mapper层的pageQuery()方法，用Page<Employee>,这里的Page是PageHelper中特有的。

![image-20250131162620071](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250131162620071.png)

3.mapper层

resultType指的是返回结果，如果是list集合的话，则是集合中的单个数据的全地址

![image-20250131162736603](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250131162736603.png)

### 代码完善

问题：日期在前端的渲染不美观

![image-20250131162913780](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250131162913780.png)

解决方案：

![image-20250131162956813](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250131162956813.png)

```Java
/**
 * 扩展Spring MVC框架消息转化器
 * @param converters
 */
protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
    log.info("扩展消息转化器...");
    //创建一个消息转化器对象、
    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();

    //需要为消息转化器添加一个对象转化器，对象转化器可以将Java对象序列化为json数据
    converter.setObjectMapper(new JacksonObjectMapper());

    //将自己的对象转化器添加到容器当中
    converters.add(0,converter);
}
```

## 启用，禁用员工账号

注意：在service层调用mapper层的方法时，可以创建一个方法名叫update，将所有的字段都考虑进去并进行修改，采用动态sql的方式，后面如果需要编辑员工的话，则可以直接调用这个方法不需要自己重新去写

## 编辑员工信息

## 导入分类功能管理模块

![image-20250201203257059](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250201203257059.png)

# day03

## 公共字段自动填充

问题：![image-20250201222457884](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250201222457884.png)

实现思路：AOP，自定义注解标识有哪些方法需要进行操作

![image-20250201222822202](C:\Users\simple\AppData\Roaming\Typora\typora-user-images\image-20250201222822202.png)